buildscript {
    ext {
        springBootVersion = '2.2.0.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/snapshot' }
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.9")
    }
}

plugins {
    id "com.github.spotbugs" version "1.6.9"
    id 'checkstyle'
    id 'pmd'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: "com.github.spotbugs"

group = 'com.nikitavbv'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.11'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    runtimeOnly('org.springframework.boot:spring-boot-devtools')
    runtimeOnly('org.postgresql:postgresql')

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('javax.xml.bind:jaxb-api:2.3.0')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('io.jsonwebtoken:jjwt-api:0.10.5')
    implementation('io.jsonwebtoken:jjwt-impl:0.10.5')
    implementation('io.jsonwebtoken:jjwt-jackson:0.10.5')
    implementation('org.seleniumhq.selenium:selenium-java:2.41.0')
    implementation('org.seleniumhq.selenium:selenium-firefox-driver:3.141.59')
    implementation('ru.yandex.qatools.ashot:ashot:1.5.3')

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.assertj:assertj-core:3.13.2'
    testImplementation 'org.awaitility:awaitility:4.0.0-rc1'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

//noinspection GroovyAssignabilityCheck
task checkFindBugsReport{
    doLast {
        def xmlReport = spotbugsMain.reports.xml
        if (!xmlReport.destination.exists()) return
        def slurped = new XmlSlurper().parse(xmlReport.destination)
        def report = ""
        slurped['BugInstance'].eachWithIndex { bug, index ->
            report += "${index + 1}. Spotted bug risk ${bug.@'type'} of category ${bug.@'category'} "
            report += "in the following places"
            bug['SourceLine'].each { place ->
                report += "\n       ${place.@'classname'} at lines ${place.@'start'}:${place.@'end'}"
            }
        }
        if (report.length() > 1) {
            logger.error "[SPOTBUGS]\n ${report}"
        }
    }
}

spotbugsMain.finalizedBy checkFindBugsReport

checkstyle {
    toolVersion '8.17'
}

spotbugs {
    effort = "max"
    reportLevel = "high"
    ignoreFailures = false
}

pmd {
    consoleOutput = true
    ruleSets = [
            "java-basic",
            "java-braces",
            "java-codesize",
            "java-comments",
            "java-design",
            "java-empty",
            "java-finalizers",
            "java-imports",
            "java-junit",
            "java-logging-java",
            "java-naming",
            "java-optimizations",
            "java-strictexception",
            "java-strings",
            "java-typeresolution",
            "java-unnecessary",
            "java-unusedcode"
    ]
}
